jobs:

  - job: PreCommit

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - task: UsePythonVersion@0
      displayName: Set up Python 3.7
      inputs:
        versionSpec: 3.7

    - script: |
        pip install pre-commit
        pre-commit run --all-files
      displayName: Run Pre-Commit


  - job: Tox

    strategy:
      matrix:
        Pylint-All-Linux:
          image_name: ubuntu-16.04
          test_title: Pylint All Linux
          toxenv: pylint-nix
          python: 3.6
        Docs-Linux:
          image_name: ubuntu-16.04
          test_title: Docs Linux
          toxenv: docs-nix
          python: 3.6
        Pytest-DoctestModules-Linux:
          image_name: ubuntu-16.04
          test_title: Pytest with Doctest Linux
          toxenv: doctest-nix
          python: 3.6
        Run-Slow-Linux:
          image_name: ubuntu-16.04
          test_title: Run slow tests Linux
          toxenv: runslow-nix
          python: 3.6
        Run-Clean-Linux:
          image_name: ubuntu-16.04
          test_title: Run clean test Linux
          toxenv: clean-nix
          python: 3.6
        Docs-MacOS:
          image_name: macos-10.13
          test_title: Docs MacOS
          toxenv: docs-nix
          python: 3.6
        Pytest-DoctestModules-MacOS:
          image_name: macos-10.13
          test_title: Pytest with Doctest MacOS
          toxenv: doctest-nix
          python: 3.6
        Docs-Windows:
          image_name: vs2017-win2016
          test_title: Docs Windows
          toxenv: docs-win
          python: 3.6
        Pytest-DoctestModules-Windows:
          image_name: vs2017-win2016
          test_title: Pytest with Doctest Windows
          toxenv: doctest-win
          python: 3.6

    pool:
      vmImage: $(image_name)

    steps:
    - task: UsePythonVersion@0
      displayName: Set up Python $(python)
      inputs:
        versionSpec: $(python)

    - script: |
        python -c "import sys; print(sys.version); print(sys.executable); print(sys.platform)"
        python -c "import platform; print(platform.machine()); print(platform.release())"
      displayName: Show python information

    - script: brew install freetds
      displayName: Install FreeTDS on MacOS
      condition: eq( variables['IMAGE_NAME'], 'macos-10.13' )

    - script: sudo apt-get install -y pandoc
      displayName: Install Pandoc on Ubuntu
      condition: and(eq( variables['TOXENV'], 'docs' ), eq( variables['IMAGE_NAME'], 'ubuntu-16.04' ))

    - script: brew install pandoc
      displayName: Install Pandoc on MacOS
      condition: and(eq( variables['TOXENV'], 'docs' ), eq( variables['IMAGE_NAME'], 'macos-10.13' ))

    - script: choco install pandoc
      displayName: Install Pandoc on Windows
      condition: and(eq( variables['TOXENV'], 'docs' ), eq( variables['IMAGE_NAME'], 'vs2017-win2016' ))

    - script: python -m pip install --upgrade pip poetry tox
      displayName: Upgrade pip, install poetry and tox

    - script: poetry run tox -e $(toxenv)
      displayName: Run Tox

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()
