jobs:
  - job: Tox

    strategy:
      matrix:
        Pylint-All:
          image_name: ubuntu-16.04
          test_title: Pylint All
          toxenv: pylint
          python: 3.7
        Docs:
          image_name: ubuntu-16.04
          test_title: Docs
          toxenv: docs
          python: 3.7
        Pytest-DoctestModules:
          image_name: ubuntu-16.04
          test_title: Pytest with Docstrings Included
          toxenv: doctest
          python: 3.7
        Linux-Py37:
          image_name: ubuntu-16.04
          test_title: Linux Py37
          toxenv: py37
          python: 3.7

    pool:
      vmImage: $(image_name)

    steps:
    - task: UsePythonVersion@0
      displayName: Setup Python
      inputs:
        versionSpec: $(python)

    - bash: sudo apt-get install -y pandoc
      displayName: Install Pandoc, need to make this only on doc run
      condition: eq( variables['TOXENV'], 'docs' )

    - bash: python -c "import sys; print(sys.version); print(sys.executable)"
      displayName: Show python information

    - bash: |
        python -m pip install --upgrade pip poetry
      displayName: Upgrade pip and install poetry

    - bash: poetry install
      displayName: Install dependencies

    - bash: poetry run tox -e $TOXENV
      displayName: Run tests

    - task: PublishTestResults@2
      displayName: Publish test results
      inputs:
        testResultsFiles: junit/*.xml
        testRunTitle: '$(test_title)'
      condition: succeededOrFailed()


  # - job: MacOS

  #   strategy:
  #     matrix:
  #       Py37:
  #         image_name: macos-10.13
  #         test_title: MacOS Py37
  #         toxenv: py37
  #         python: 3.7

  #   pool:
  #     vmImage: $(image_name)

  #   steps:
  #   - bash: echo "##vso[task.prependpath]$CONDA/bin"
  #     displayName: Add Conda to PATH

  #   - bash: sudo chown -R $USER $CONDA
  #     displayName: Take ownership of Conda installation

  #   - bash: conda config --add channels conda-forge
  #     displayName: Add Conda-Forge

  #   - bash: conda config --set always_yes true
  #     displayName: Make Conda always say yes to install

  #   - bash: conda update --quiet conda
  #     displayName: Update Conda

  #   - bash: conda install --quiet python=$(python)
  #     displayName: Install Python Version

  #   - bash: python -c "import sys; print(sys.version); print(sys.executable)"
  #     displayName: Show Python Information

  #   - bash: conda info --all
  #     displayName: Show Conda Information

  #   - bash: conda install --quiet pip "xlwings >= 0.15.4" matplotlib pymssql
  #     displayName: Install difficult packages with Conda

  #   - bash: yarn
  #     displayName: Run yarn

  #   - bash: yarn install:test
  #     displayName: Install dependencies for testing with yarn

  #   - bash: pytest -v
  #     displayName: Run tests

  #   - task: PublishTestResults@2
  #     displayName: Publish test results
  #     inputs:
  #       testResultsFiles: junit/*.xml
  #       testRunTitle: '$(test_title)'
  #     condition: succeededOrFailed()


  # - job: Windows

  #   strategy:
  #     matrix:
  #       Py37:
  #         image_name: vs2017-win2016
  #         test_title: Windows Py37
  #         toxenv: py37
  #         python: 3.7

  #   pool:
  #     vmImage: $(image_name)

  #   steps:
  #   - script: |
  #       $(CONDA)\Scripts\activate && conda config --add channels conda-forge
  #     displayName: Add Conda-Forge

  #   - script:  |
  #       $(CONDA)\Scripts\activate && conda config --set always_yes true
  #     displayName: Make Conda always say yes to install

  #   - script:  |
  #       $(CONDA)\Scripts\activate && conda update --quiet conda && conda init cmd.exe
  #     displayName: Update Conda and run `conda init cmd.exe`

  #   - script:  |
  #       $(CONDA)\Scripts\activate && conda install --quiet python=$(python)
  #     displayName: Install Python Version

  #   - script:  |
  #       $(CONDA)\Scripts\activate && python -c "import sys; print(sys.version); print(sys.executable)"
  #     displayName: Show Python Information

  #   - script:  |
  #       $(CONDA)\Scripts\activate && conda info --all
  #     displayName: Show Conda Information

  #   - script:  |
  #       $(CONDA)\Scripts\activate && conda install --quiet pip "xlwings >= 0.15.4" shapely
  #     displayName: Install difficult packages with Conda

  #   - script:  |
  #       $(CONDA)\Scripts\activate && yarn
  #     displayName: Run yarn

  #   - script:  |
  #       $(CONDA)\Scripts\activate && yarn install:test
  #     displayName: Install dependencies for testing with yarn

  #   - script:  |
  #       $(CONDA)\Scripts\activate && pytest -v
  #     displayName: Run tests

  #   - task: PublishTestResults@2
  #     displayName: Publish test results
  #     inputs:
  #       testResultsFiles: junit/*.xml
  #       testRunTitle: '$(test_title)'
  #     condition: succeededOrFailed()


  - job: NotebookOutputs

    pool:
      vmImage: 'ubuntu-16.04'

    steps:
    - bash: "python -m pip install -U pip setuptools --user"
      displayName: Upgrade pip and setuptools

    - bash: python -m pip install -U "nbstripout>=0.3.5" --user
      displayName: Install nbstripout

    - bash: find . -iname \*.ipynb | xargs -d "\n" python -m nbstripout && git add -A && git diff HEAD --name-only --exit-code -- "*ipynb"
      displayName: Check that notebooks have no included output
